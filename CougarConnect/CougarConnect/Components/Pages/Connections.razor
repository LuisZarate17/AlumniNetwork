@page "/Connections"
@attribute [StreamRendering]

<PageTitle>Connections</PageTitle>

<h1>Alumni Connections</h1>

<p>This is where you can find all the connections you've made.</p>

@if (connections == null)
{
    <p><em>Loading...</em></p>
}
else if (!connections.Any())
{
    <p>You currently have no connections.</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Major</th>
                <th>Graduation Year</th>
                <th>Company</th>
                <th>City</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var connection in connections)
            {
                <tr>
                    <td>@connection.First</td>
                    <td>@connection.Last</td>
                    <td>@connection.Major</td>
                    <td>@connection.GradYear</td>
                    <td>@connection.Company</td>
                    <td>@connection.City</td>
                </tr>
            }
        </tbody>
    </table>
}

<!-- Outgoing Connection Requests -->
<h3>Outgoing Connection Requests</h3>
@if (outgoingRequests.Any())
{
    <ul>
        @foreach (var request in outgoingRequests)
        {
            <li>
                @request.FirstName @request.LastName - @request.Status
                <button class="btn btn-warning" @onclick="() => RetractRequest(request)">Retract</button>
                <button class="btn btn-danger" @onclick="() => DeleteRequest(request)">Delete</button>
            </li>
        }
    </ul>
}
else
{
    <p>No outgoing connection requests.</p>
}

@code {
    private List<Connection> connections;
    private List<ConnectionRequest> outgoingRequests = new List<ConnectionRequest>();

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        // Load the user's connections (initially empty)
        connections = new List<Connection>();
        // Load the user's outgoing connection requests (initially empty)
        outgoingRequests = new List<ConnectionRequest>();
    }

    private void RetractRequest(ConnectionRequest request)
    {
        request.Status = "Retracted";
        StateHasChanged();
    }

    private void DeleteRequest(ConnectionRequest request)
    {
        outgoingRequests.Remove(request);
        StateHasChanged();
    }

    public class Connection
    {
        public string First { get; set; }
        public string Last { get; set; }
        public string Major { get; set; }
        public string GradYear { get; set; }
        public string Company { get; set; }
        public string City { get; set; }
    }

    public class ConnectionRequest
    {
        public string RequesterName { get; set; }
        public string Message { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Status { get; set; } // Pending, Accepted, Rejected, Retracted
    }
}
