@page "/Connections"
@attribute [StreamRendering]

<PageTitle>Connections</PageTitle>

<h1>Connections</h1>

<p>This is where you can view the status of your connection requests.</p>

@if (allConnections == null || pendingRequests == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h2>Connections</h2>
    @if (allConnections.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Industry</th>
                    <th>City</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var connection in allConnections)
                {
                    <tr>
                        <td>@connection.RequestDate.ToShortDateString()</td>
                        <td>@connection.FullName</td>
                        <td>@connection.Industry</td>
                        <td>@connection.City</td>
                        <td>@connection.Status</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No connections at the moment.</p>
    }

    <h2>Pending Connections</h2>
    @if (pendingRequests.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Name</th>
                    <th>Industry</th>
                    <th>City</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in pendingRequests)
                {
                    <tr>
                        <td>@request.RequestDate.ToShortDateString()</td>
                        <td>@request.FullName</td>
                        <td>@request.Industry</td>
                        <td>@request.City</td>
                        <td>Pending</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p>No pending connection requests at the moment.</p>
    }
}

@code {
    private List<ConnectionRequest>? allConnections;
    private List<ConnectionRequest>? pendingRequests;

    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading of connection requests
        await Task.Delay(500);

        // Generate random data
        var acceptedRequests = GenerateRandomRequests(3, "Accepted");
        var declinedRequests = GenerateRandomRequests(2, "Declined");
        pendingRequests = GenerateRandomRequests(2, "Pending");

        // Combine accepted and declined into allConnections
        allConnections = acceptedRequests.Concat(declinedRequests).ToList();
    }

    private List<ConnectionRequest> GenerateRandomRequests(int count, string status)
    {
        var random = new Random();
        var industries = new[] { "Software", "Finance", "Healthcare", "Education", "Engineering" };
        var cities = new[] { "Pullman", "Seattle", "Spokane", "Richland", "Tacoma" };

        var requests = new List<ConnectionRequest>();
        for (int i = 0; i < count; i++)
        {
            var firstName = GenerateRandomName();
            var lastName = GenerateRandomName();
            requests.Add(new ConnectionRequest
                {
                    Id = i + 1,
                    FirstName = firstName,
                    LastName = lastName,
                    FullName = $"{firstName} {lastName}",
                    RequestDate = DateTime.Now.AddDays(-random.Next(1, 10)),
                    Industry = industries[random.Next(industries.Length)],
                    City = cities[random.Next(cities.Length)],
                    Status = status
                });
        }
        return requests;
    }

    private string GenerateRandomName()
    {
        var names = new[] { "John", "Jane", "Bob", "Alice" };
        var random = new Random();
        return names[random.Next(names.Length)];
    }

    private class ConnectionRequest
    {
        public int Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FullName { get; set; } // Combined Name
        public DateTime RequestDate { get; set; }
        public string Industry { get; set; }
        public string City { get; set; }
        public string Status { get; set; } // Accepted/Declined
    }
}
