@page "/Connection_Search"
@rendermode InteractiveServer

<PageTitle>Connection_Search</PageTitle>

<h3>Search for an alumni connection</h3>

<p>Search for an alumni connection by entering one or multiple of the following criteria:</p>

<div class="search-container">
    <div class="mb-3">
        <label for="searchMajor" class="form-label">Major</label>
        <input type="text" class="form-control" id="searchMajor" @bind="searchMajor" placeholder="Enter Major">
    </div>
    <div class="mb-3">
        <label for="searchGradYear" class="form-label">Graduation Year</label>
        <input type="text" class="form-control" id="searchGradYear" @bind="searchGradYear" placeholder="Enter Graduation Year">
    </div>
    <div class="mb-3">
        <label for="searchCompany" class="form-label">Company</label>
        <input type="text" class="form-control" id="searchCompany" @bind="searchCompany" placeholder="Enter Company">
    </div>
    <div class="mb-3">
        <label for="searchCity" class="form-label">City</label>
        <input type="text" class="form-control" id="searchCity" @bind="searchCity" placeholder="Enter City">
    </div>
    <button type="button" class="btn btn-primary" @onclick="OnSearchClick">Search</button>
</div>

@if (filteredResults != null && filteredResults.Count > 0)
{
    <h4>Search Results:</h4>
    <ul>
        @foreach (var result in filteredResults)
        {
            <li>@result</li>
        }
    </ul>
}
else
{
    <p>No results found.</p>
}

@code {
    // Bind these properties to the form inputs
    private string searchMajor;
    private string searchGradYear;
    private string searchCompany;
    private string searchCity;

    // Store filtered results
    private List<string> filteredResults;

    // Method that is called when the Search button is clicked
    private void OnSearchClick()
    {
        // Provide the path to your CSV file
        string inputCsvFile = Path.Combine(Directory.GetCurrentDirectory(), "Data", "Alumni_rows.csv");

        // Call the search function
        filteredResults = People_Search(inputCsvFile, searchMajor, searchGradYear, searchCompany, searchCity);
    }

    // Your search logic function
    public static List<string> People_Search(string inputCsvFile, string major = null, string gradYear = null, string company = null, string city = null)
    {
        // List to store filtered results
        var filteredResults = new List<string>();

        // Read all lines from the CSV
        var lines = File.ReadAllLines(inputCsvFile);

        // Skip the header row
        var header = lines[0];
        var headers = header.Split(',');

        // We will skip adding the header row in filtered results as we're just returning data
        for (int i = 1; i < lines.Length; i++) // Skip header
        {
            var fields = lines[i].Split(','); // Assuming CSV is comma-separated

            // Extract alumni data fields based on your CSV columns
            var alumniFirstName = fields[1];
            var alumniLastName = fields[2];
            var alumniGradYear = fields[3];
            var alumniCity = fields[4];
            var alumniMajor = fields[5];
            var alumniCompany = fields[6];
            // No 'Company' field in CSV; so you can ignore it or modify CSV accordingly.

            // Check if the current row matches the filter criteria
            bool matchesFilter = true;

            if (!string.IsNullOrEmpty(major) && !alumniMajor.Contains(major, StringComparison.OrdinalIgnoreCase))
            {
                matchesFilter = false;
            }

            if (!string.IsNullOrEmpty(gradYear) && !alumniGradYear.Contains(gradYear))
            {
                matchesFilter = false;
            }

            if (!string.IsNullOrEmpty(company) && !alumniCompany.Contains(company, StringComparison.OrdinalIgnoreCase))
            {
                matchesFilter = false;
            }

            if (!string.IsNullOrEmpty(city) && !alumniCity.Contains(city, StringComparison.OrdinalIgnoreCase))
            {
                matchesFilter = false;
            }

            // If all filters pass, add the result to the list
            if (matchesFilter)
            {
                var resultString = $"{alumniFirstName} {alumniLastName} ({alumniGradYear}) - {alumniMajor} - {alumniCity} - {alumniCompany}";
                filteredResults.Add(resultString);
            }
        }

        return filteredResults;
    }
}
