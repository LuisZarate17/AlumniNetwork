@page "/Connection_Search"
@rendermode InteractiveServer

<PageTitle>Connection_Search</PageTitle>

<h3>Search for an alumni connection</h3>

<!-- Search Form -->
<div class="search-container">
    <div class="mb-3">
        <label for="searchMajor" class="form-label">Major</label>
        <input type="text" class="form-control" id="searchMajor" @bind="searchMajor" placeholder="Enter Major">
    </div>
    <div class="mb-3">
        <label for="searchGradYear" class="form-label">Graduation Year</label>
        <input type="text" class="form-control" id="searchGradYear" @bind="searchGradYear" placeholder="Enter Graduation Year">
    </div>
    <div class="mb-3">
        <label for="searchCompany" class="form-label">Company</label>
        <input type="text" class="form-control" id="searchCompany" @bind="searchCompany" placeholder="Enter Company">
    </div>
    <div class="mb-3">
        <label for="searchCity" class="form-label">City</label>
        <input type="text" class="form-control" id="searchCity" @bind="searchCity" placeholder="Enter City">
    </div>
    <button type="button" class="btn btn-primary" @onclick="OnSearchClick">Search</button>
</div>

@if (filteredResults != null && filteredResults.Count > 0)
{
    <h4>Search Results:</h4>
    <ul>
        @foreach (var result in filteredResults)
        {
            <li>
                <button class="btn btn-link" @onclick="() => OnResultClick(result)">
                    @result
                </button>
            </li>
        }
    </ul>
}
else
{
    <p>No results found.</p>
}

<!-- Modal for Connection Request -->
@if (showModal)
{
    <div class="modal" tabindex="-1" style="display: block;" aria-hidden="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Connection Request</h5>
                    <button type="button" class="close" @onclick="CloseModal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Would you like to send a connection request to <strong>@selectedAlumni</strong>?</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">No</button>
                    <button type="button" class="btn btn-primary" @onclick="OpenConnectionForm">Yes</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- Connection Request Form -->
@if (showConnectionForm)
{
    <div class="connection-form">
        <h4>Fill out the Connection Request Form</h4>

        <!-- EditForm Component for Connection Request -->
        <EditForm Model="@connectionRequest" OnValidSubmit="HandleConnectionRequestSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label for="requesterName" class="form-label">Your Name</label>
                <InputText id="requesterName" class="form-control" @bind-Value="connectionRequest.RequesterName" />
            </div>

            <div class="mb-3">
                <label for="message" class="form-label">Message</label>
                <InputTextArea id="message" class="form-control" @bind-Value="connectionRequest.Message" />
            </div>

            <div class="mb-3">
                <button type="submit" class="btn btn-primary">Send Request</button>
            </div>
        </EditForm>
    </div>
}

@code {
    private string searchMajor;
    private string searchGradYear;
    private string searchCompany;
    private string searchCity;

    private List<string> filteredResults;
    private bool showModal = false;
    private bool showConnectionForm = false; // Toggle visibility of the connection form
    private string selectedAlumni;
    
    // Connection request model
    private ConnectionRequest connectionRequest = new ConnectionRequest();

    private void OnSearchClick()
    {
        string inputCsvFile = Path.Combine(Directory.GetCurrentDirectory(), "Data", "Alumni_rows.csv");
        filteredResults = People_Search(inputCsvFile, searchMajor, searchGradYear, searchCompany, searchCity);
    }

    private void OnResultClick(string result)
    {
        selectedAlumni = result; 
        showModal = true; 
    }

    private void CloseModal()
    {
        showModal = false;
    }

    private void OpenConnectionForm()
    {
        showModal = false; // Close the modal
        showConnectionForm = true; // Show the connection request form
        StateHasChanged(); // Ensure the UI updates
    }

    private void HandleConnectionRequestSubmit()
    {
        // Handle the connection request submission logic here (e.g., saving to a database or sending an email)
        Console.WriteLine($"Connection request sent to {selectedAlumni} from {connectionRequest.RequesterName} with message: {connectionRequest.Message}");

        // After submission, hide the form and show a success message or redirect the user
        showConnectionForm = false; 
        connectionRequest = new ConnectionRequest(); // Reset the form
        Console.WriteLine("Connection request submitted successfully!");
    }

    public static List<string> People_Search(string inputCsvFile, string major = null, string gradYear = null, string company = null, string city = null)
    {
        var filteredResults = new List<string>();
        var lines = File.ReadAllLines(inputCsvFile);
        var header = lines[0];
        var headers = header.Split(',');

        for (int i = 1; i < lines.Length; i++)
        {
            var fields = lines[i].Split(',');

            var alumniFirstName = fields[1];
            var alumniLastName = fields[2];
            var alumniGradYear = fields[3];
            var alumniCity = fields[4];
            var alumniMajor = fields[5];
            var alumniCompany = fields[6];

            bool matchesFilter = true;

            if (!string.IsNullOrEmpty(major) && !alumniMajor.Contains(major, StringComparison.OrdinalIgnoreCase))
            {
                matchesFilter = false;
            }

            if (!string.IsNullOrEmpty(gradYear) && !alumniGradYear.Contains(gradYear))
            {
                matchesFilter = false;
            }

            if (!string.IsNullOrEmpty(company) && !alumniCompany.Contains(company, StringComparison.OrdinalIgnoreCase))
            {
                matchesFilter = false;
            }

            if (!string.IsNullOrEmpty(city) && !alumniCity.Contains(city, StringComparison.OrdinalIgnoreCase))
            {
                matchesFilter = false;
            }

            if (matchesFilter)
            {
                var resultString = $"{alumniFirstName} {alumniLastName} ({alumniGradYear}) - {alumniMajor} - {alumniCity} - {alumniCompany}";
                filteredResults.Add(resultString);
            }
        }

        return filteredResults;
    }

    public class ConnectionRequest
    {
        public string RequesterName { get; set; }
        public string Message { get; set; }
    }
}


